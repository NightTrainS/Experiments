<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ninja_stand</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player

grav = .3;
hspd = 0;
vspd = 0;
jspd = -8;
pspd = 4;
maxpspd = 8;
airjump = 1;
slide = 1;
ycoins = 0;


// Initialize gamepad variables

lxaxis = 0;
lyaxis = 0;
lmagnitude = 0;

rxaxis = 0;
ryaxis = 0;
rmagnitude = 0;

bbutton = 0;
xbutton = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the character


// Gamepad Input
//var device = argument[0];

//lxaxis = gamepad_axis_value(0, gp_axislh);  // returns value (-1, 1)
//lyaxis = gamepad_axis_value(0, gp_axislv);  // returns value (-1, 1)
//lmagnitude = point_distance(0, 0, lxaxis, lyaxis);

//if (lmagnitude &gt; 1) 
//    {lmagnitude = 1;}
    
//rxaxis = gamepad_axis_value(0, gp_axisrh);  // returns value (-1, 1)
//ryaxis = gamepad_axis_value(0, gp_axisrv);  // returns value (-1, 1)
//rmagnitude = point_distance(0, 0, rxaxis, ryaxis);

//if (rmagnitude &gt; 1) 
//    {rmagnitude = 1;}

//if (abs(rxaxis)&lt;.3)
//    {
//        rxaxis = 0;
//    }
//else
//    {
//        rxaxis = rxaxis;
//    }
//    
//if (abs(ryaxis)&lt;.3)
//   {
//        ryaxis = 0;
//    }
//else
//    {
//        ryaxis = ryaxis;
//    }

//  grav = 2;
//  hspd = 0;
//  vspd = 0;
//  jspd = -16;
//  pspd = 8;
//  airjump = 1;
//  slide = 1;

rkey = keyboard_check(ord("D")) || gamepad_button_check(0,gp_padr);
lkey = keyboard_check(ord("A")) || gamepad_button_check(0,gp_padl);
var jkey = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0,gp_face1);
var dkey = keyboard_check(ord("S")) || gamepad_button_check(0,gp_padd);
var jkey_held = keyboard_check(vk_space) || gamepad_button_check(0,gp_face1);


if hspd = 0
    {
        sprite_index = spr_ninja_stand;
    }

// Moving right
if (rkey)
    {
        hspd = (pspd*(1+xbutton+bbutton));
        sprite_index = spr_ninja_run;
        image_speed = .05*hspd;
        image_angle = 0;
        
    
        // Left wall jump
//        if (place_meeting(x-1, y, obj_solid) &amp;&amp; !place_meeting(x, y+1, obj_solid) &amp;&amp; !lkey)
//            {
//                vspd = jspd;
//            }
    }

// Moving left
if (lkey)
    {
        hspd = -(pspd*(1+xbutton+bbutton));
        sprite_index = spr_ninja_run;
        image_speed = .05*hspd;
        image_angle = 180;
        
        // Right wall jump
//        if (place_meeting(x+1, y, obj_solid) &amp;&amp; !place_meeting(x, y+1, obj_solid) &amp;&amp; !rkey)
//            {
//                vspd = jspd;
//            }
    }



// Check down input
if (dkey)
    {
        image_yscale = 1;
    }
else
    {
        image_yscale = 1;
    }
    
// Player Run
if gamepad_button_check(0,gp_face3)
    {
        xbutton = 1;
    }
else
    {
        xbutton = 0;
    }
    
// Slide
if (gamepad_button_check_pressed(0,gp_face2))
    {
        bbutton += 1;}
        if bbutton &gt; 1
            {
               bbutton = 0 ;
            }
    

if (place_meeting(x,y, obj_coin1))
    {
        ycoins +=1;
        audio_play_sound(snd_coin,9,false);
        with instance_nearest(x,y,obj_coin1)
        {instance_destroy();}
    }
            
            
// Jump
// Ground Check
if (!place_meeting(x, y+1, obj_solid))
    {
        sprite_index = spr_ninja_jump;
    }
if (place_meeting(x, y+1, obj_solid))
    {   
        airjump = 1;
        vspd = 0;
       
        if (jkey)
        {
            vspd = jspd;
            //audio_play_sound(snd_sound,10,false);
        }
    }
else
    {
        // Gravity
        if (vspd &lt; 10)
            {
                vspd += grav;
            }
            
        // Check for airjump
        if (airjump &gt; 0)
            {
                if (jkey)
                    {
                        vspd = jspd;
                        airjump -= 1;
                    }
            }
    }
    
// Variable Jump
if (vspd &lt; 0) &amp;&amp; (!jkey_held) vspd = max(vspd, jspd/2)

// Wall Friction
if (place_meeting(x+1,y,obj_solid) || place_meeting(x-1, y, obj_solid)) &amp;&amp; (vspd &gt; 0)
    {   
        if (lkey || rkey)
            {   vspd -= 1.0;
                if vspd &lt;= .8 
                    {vspd = .8}
                //if vspd &gt; 4
                //{
                //    vspd = 4;
                //}
            }
    }

// Jumpkey Wall Jump
if (jkey) &amp;&amp; (place_meeting(x+1,y,obj_solid) || place_meeting(x-1, y, obj_solid))
    {
        vspd = jspd;
    }

// Check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey))
    {
        hspd = 0;
    }

// Horizontal collisions
if (place_meeting(x+(hspd), y, obj_solid))
    {
        while (!place_meeting(x+sign(hspd), y, obj_solid))
            {
                x+= sign(hspd);
            }
        hspd = 0;
    }
    


    
// Move horizontally
x += round(hspd);

// Vertical collisions
if (place_meeting(x, y+vspd, obj_solid))
    {
        while (!place_meeting(x, y+sign(vspd), obj_solid))
            {
                y+= sign(vspd);
            }
        vspd = 0;
    }

//if (hspd != 0)
//    {
//        if !place_free(x+hspd, y)
//            {
//                if hspd &gt; 0 move_contact_solid(0, hspd);
//                if hspd &lt; 0 move_contact_solid(180, -hspd);
//                hspd = 0;
//            }
//    }

//if (vspd != 0)
//    {
//        if !place_free(x+hspd, y+vspd)
//            {
//                if vspd &gt; 0 move_contact_solid(270, vspd);
//                if vspd &lt; 0 move_contact_solid(90, -vspd);
//                vspd = 0;
//            }
//    }


// Move Vertically
y += round(vspd);


if (keyboard_check(vk_escape) || (gamepad_button_check(0,gp_start) &amp;&amp; gamepad_button_check(0,gp_select)))
    {
        game_end();
    }
//image_angle = point_direction(x, y, obj_nPlayer.x + rxaxis, obj_nPlayer.y + ryaxis);


//Fall in Gap and die
if y&gt;room_height
{
room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(32, 32, string(fps));
draw_text(32, 48, "vspd:" +string(vspd));
draw_text(32, 64, "hspd:" +string(hspd));
draw_text(32, 80, "X-" + string(obj_bFireball.x) + "  Y-" + string(obj_bFireball.y));

//draw_text(32, 96, string(lxaxis) + "," + string(lyaxis));
//draw_text(32, 112, string(rxaxis) + "," + string(ryaxis));

draw_text(32, 128, "X-"+string(xbutton));
draw_text(32, 144, "B-"+string(bbutton));

draw_text(32, 160, "Coins: "+string(ycoins));



//xaxis = gamepad_axis_value(device, gp_axislh);  // returns value (-1, 1)
//yaxis = gamepad_axis_value(device, gp_axislv);  // returns value (-1, 1)
//magnitude = point_distance(0, 0, xaxis, yaxis);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fireball = instance_create(x,y,obj_fireball);

fireball.direction = image_xscale;
fireball.x  += 3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
