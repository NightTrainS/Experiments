<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_benemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
dir = choose(1,-1);  //Determines the direction of the enemy
wspd=1; //Determines the speed of the enemy
hspd=0;  //Determines the velocity of the enemy
vspd=0;  //Vertical velocity of the enemy set to zero
jspd=4; // vertical speed of the enemy
grav =.2; //Gravity to bring down the enemy

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bouncing Enemy Physics
// dir = direction of the enemy
// wspd = speed of the enemy
// hspd = hozontial velocity of the enemy
// vspd = vertical velocity of the enemy
// jspd = vertical speed of the enemy
// grav = gravity to bring down the enemy

hspd=dir*wspd;

//Gravity to control the upward motion

if (vspd &lt;10)
{
    vspd+=grav;
}

//Horizontal collision that forces enemy to go opposite direction going to the right
if(place_meeting(x+hspd,y,obj_solid))
{
    if(!place_meeting(x+sign(hspd),y,obj_solid))
    {
        x+=sign(hspd);
    }
    dir=-sign(hspd);
}
x+=hspd;
//Vertical collision that forces enemy to bounce up when it touches the ground

if (place_meeting(x,y+4,obj_solid))
{
    if(!place_meeting(x,y+1,obj_solid))
    {
        y+=1;
    }
    vspd=-jspd;
}

if (place_meeting(x,y-4,obj_solid))
{
    if(!place_meeting(x,y-1,obj_solid))
    {
        y+=-1;
    }
    vspd+=grav;
}

y+=vspd;


//Enemy Collision
if(place_meeting(x,y,obj_nPlayer))
{
    if (obj_nPlayer.y &lt; y-8)
    {
        with (obj_nPlayer) vsp = -jspd;
        instance_destroy();
    }
    else
    {
        
        room_restart();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
